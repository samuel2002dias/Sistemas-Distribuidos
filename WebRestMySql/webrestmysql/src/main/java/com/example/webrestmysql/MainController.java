package com.example.webrestmysql;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

@Controller // This means that this class is a Controller
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data

	private DepartamentoRepository depRepository;
	
	@Autowired
	private ProfessorRepository profRepository;
	
	@GetMapping(path="/")
	public String getAllDepsAndProfs (Model model) {
		model.addAttribute("ListDeps" , depRepository.findAll());
		model.addAttribute("ListProfs" , profRepository.findAll());
		return "index";
	}
	
	@GetMapping("/showNewDepForm")
	public String showNewDepForm(Model model) {
		// create model attribute to bind form data
		Departamento depar = new Departamento();
		model.addAttribute("newdep", depar);
		return "new_dep";
	}
	
	@GetMapping("/showNewProfForm")
	public String showNewProfForm(Model model) {
		// create model attribute to bind form data
		Professor p = new Professor();
		model.addAttribute("newprof", p);
		return "new_prof";
	}

	@PostMapping("/saveDep")
	public String saveDep (@ModelAttribute("newdep") Departamento dep ) {
		// save dep to database
		depRepository.save(dep);
		return "redirect:/";
	}
	
	@PostMapping("/saveProf")
	public String saveProf (@ModelAttribute("newprof") Professor prof ) {
		// save prof to database
		profRepository.save(prof);
		return "redirect:/";
	}
	
	@GetMapping("/deleteDep/{id}")
	public String deleteDep(@PathVariable(value = "id") Integer id) {
	 depRepository.deleteById(id);
	 return "redirect:/";
	}
	
	@GetMapping("/deleteProf/{id}")
	public String deleteProf(@PathVariable(value = "id") Integer id) {
	 profRepository.deleteById(id);
	 return "redirect:/";
	}
	
	@GetMapping("/showUpdateDepForm/{id}")
	public String showUpdateDepForm(@PathVariable(value = "id") Integer id, Model model) {
		Optional < Departamento > optional = depRepository.findById(id);
		Departamento dep = null;
		if (optional.isPresent()) {
			dep = optional.get();
		} else {
			throw new RuntimeException(" Department not found for id :: " + id);
		}
		// set department as a model attribute to pre-populate the form
		model.addAttribute("depart", dep);
		return "update_dep";
	}
	
	@GetMapping("/showUpdateProfForm/{id}")
	public String showUpdateProfForm(@PathVariable(value = "id") Integer id, Model model) {
		Optional < Professor > optional = profRepository.findById(id);
		Professor prof = null;
		if (optional.isPresent()) {
			prof = optional.get();
		} else {
			throw new RuntimeException(" Department not found for id :: " + id);
		}
		// set department as a model attribute to pre-populate the form
		model.addAttribute("prof", prof);
		return "update_prof";
	}

}